"use strict";(self.webpackChunkrx_angular=self.webpackChunkrx_angular||[]).push([[1396],{6734:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>p});var i=n(7462),r=n(3366),a=(n(7294),n(3905)),l=["components"],o={sidebar_position:1,sidebar_label:"Manage ViewModel",title:"Selecting the ViewModel"},s="Selecting the ViewModel",c={unversionedId:"state/recipes/manage-viewmodel",id:"state/recipes/manage-viewmodel",title:"Selecting the ViewModel",description:"Here are some useful strategies to properly handle ViewModels with @rx-angular/state. In this examples we will use standalone selectSlice operator.",source:"@site/docs/state/recipes/manage-viewmodel.md",sourceDirName:"state/recipes",slug:"/state/recipes/manage-viewmodel",permalink:"/docs/state/recipes/manage-viewmodel",draft:!1,editUrl:"https://github.com/rx-angular/rx-angular/edit/main/docs/state/recipes/manage-viewmodel.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,sidebar_label:"Manage ViewModel",title:"Selecting the ViewModel"},sidebar:"docs",previous:{title:"Determine state type",permalink:"/docs/state/recipes/determine-state-type"},next:{title:"Run partial updates",permalink:"/docs/state/recipes/run-partial-updates"}},m={},p=[{value:"Using selectSlice:",id:"using-selectslice",level:2},{value:"Multiple Observables and selectSlice:",id:"multiple-observables-and-selectslice",level:2}],d={toc:p};function u(e){var t=e.components,n=(0,r.Z)(e,l);return(0,a.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"selecting-the-viewmodel"},"Selecting the ViewModel"),(0,a.kt)("p",null,"Here are some useful strategies to properly handle ",(0,a.kt)("inlineCode",{parentName:"p"},"ViewModels")," with ",(0,a.kt)("inlineCode",{parentName:"p"},"@rx-angular/state"),". In this examples we will use standalone ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/rx-angular/rx-angular/blob/main/libs/state/docs/api/operators/select-slice.md"},(0,a.kt)("inlineCode",{parentName:"a"},"selectSlice"))," operator."),(0,a.kt)("p",null,"Imagine the following setup:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"interface Item {\n  id: string;\n  name: string;\n}\n\ninterface ComponentState {\n  title: string;\n  created: string;\n  list: Item[];\n  visibleItemIds: string[];\n}\n\ninterface ComponentViewModel {\n  title: string;\n  created: string;\n  visibleItems: Item[];\n  total: number;\n}\n")),(0,a.kt)("p",null,"You want to render the following template."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},'<ng-container *ngIf="viewModel$ | async as vm">\n  <h1>\n    {{vm.title}}\n    <small>{{vm.created | date}} -<b>total: {{vm.total}}</b></small>\n  </h1>\n  <ul>\n    <li *ngFor="let item of vm.visibleItems">{{ item.name }}</li>\n  </ul>\n</ng-container>\n')),(0,a.kt)("p",null,"As your view requires additional and/or derived information from your component state, we need to transform the\n",(0,a.kt)("inlineCode",{parentName:"p"},"ComponentState")," state into another shape (",(0,a.kt)("inlineCode",{parentName:"p"},"ComponentViewModel"),")\nChanges of your ",(0,a.kt)("inlineCode",{parentName:"p"},"viewModel$")," ultimately result in component renderings, so we have to make sure that it's emissions\nare distinct."),(0,a.kt)("h2",{id:"using-selectslice"},"Using selectSlice:"),(0,a.kt)("p",null,"For this scenario we created the ",(0,a.kt)("inlineCode",{parentName:"p"},"selectSlice")," operator.\nIt returns an Observable that emits a distinct subset of the received object."),(0,a.kt)("p",null,"Utilizing it inside of the ",(0,a.kt)("inlineCode",{parentName:"p"},"RxState#select")," method enables you to pluck a ",(0,a.kt)("em",{parentName:"p"},"distinct")," ",(0,a.kt)("inlineCode",{parentName:"p"},"ViewModel")," directly out of your state."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"@Component()\nexport class ViewModelComponent extends RxState<ComponentState> {\n  readonly viewModel$: Observable<ComponentViewModel> = this.select(\n    selectSlice(['title', 'list', 'created', 'visibleItemIds']),\n    map(({ title, list, created, visibleItemIds }) => ({\n      title,\n      created,\n      total: list.length,\n      visibleItems: list.filter((item) =>\n        visibleItemIds.some((itemId) => itemId === item.id)\n      ),\n    }))\n  );\n  constructor() {\n    super();\n  }\n}\n")),(0,a.kt)("h2",{id:"multiple-observables-and-selectslice"},"Multiple Observables and selectSlice:"),(0,a.kt)("p",null,"There are situations where you want to divide your ",(0,a.kt)("inlineCode",{parentName:"p"},"ViewModel")," into different parts."),(0,a.kt)("p",null,"Imagine the following view:\nThis way you may achieve more control over what to render when, e.g. lazy rendering."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},'<ng-container *ngIf="viewModel.main$ | async as vm">\n  <h1>\n    {{vm.title}}\n    <small> {{vm.created | date}} </small>\n  </h1>\n</ng-container>\n<ng-container *ngIf="viewModel.list$ | async as vm">\n  <div><b>total: {{vm.total}}</b></div>\n  <ul>\n    <li *ngFor="let item of vm.visibleItems">{{ item.name }}</li>\n  </ul>\n</ng-container>\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"interface ComponentViewModel {\n  main$: Observable<{ title: string; created: Date }>;\n  list$: Observable<{ total: number; visibleItems: Item[] }>;\n}\n\n@Component()\nexport class ViewModelComponent extends RxState<ComponentState> {\n  readonly viewModel: ComponentViewModel = {\n    main$: this.state.select(selectSlice(['title', 'created'])),\n    list$: this.state.select(\n      selectSlice(['list', 'visibleItemIds']),\n      map(({ list, visibleItemIds }) => ({\n        total: list.length,\n        visibleItems: list.filter((item) =>\n          visibleItemIds.some((itemId) => itemId === item.id)\n        ),\n      }))\n    ),\n  };\n  constructor() {\n    super();\n  }\n}\n")))}u.isMDXComponent=!0},3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>u});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),d=c(n),u=r,g=d["".concat(s,".").concat(u)]||d[u]||p[u]||a;return n?i.createElement(g,l(l({ref:t},m),{},{components:n})):i.createElement(g,l({ref:t},m))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var c=2;c<a;c++)l[c]=n[c];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);