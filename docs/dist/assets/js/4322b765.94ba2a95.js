"use strict";(self.webpackChunkrx_angular=self.webpackChunkrx_angular||[]).push([[3658],{6984:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>u});var n=r(7462),a=r(3366),o=(r(7294),r(3905)),i=["components"],l={title:"remove"},p=void 0,s={unversionedId:"cdk/api/transformation-helpers/array/remove",id:"cdk/api/transformation-helpers/array/remove",title:"remove",description:"remove",source:"@site/docs/cdk/api/transformation-helpers/array/remove.md",sourceDirName:"cdk/api/transformation-helpers/array",slug:"/cdk/api/transformation-helpers/array/remove",permalink:"/docs/cdk/api/transformation-helpers/array/remove",draft:!1,editUrl:"https://github.com/rx-angular/rx-angular/edit/main/docs/cdk/api/transformation-helpers/array/remove.md",tags:[],version:"current",frontMatter:{title:"remove"},sidebar:"docs",previous:{title:"insert",permalink:"/docs/cdk/api/transformation-helpers/array/insert"},next:{title:"toDictionary",permalink:"/docs/cdk/api/transformation-helpers/array/to-dictionary"}},c={},u=[{value:"remove",id:"remove",level:2},{value:"Edge cases",id:"edge-cases",level:3},{value:"Signature",id:"signature",level:3},{value:"Parameters",id:"parameters",level:3},{value:"source",id:"source",level:4},{value:"typeof: T[]",id:"typeof-t",level:6},{value:"scrap",id:"scrap",level:4},{value:"typeof: Partial&lt;T&gt;[] | Partial&lt;T&gt;",id:"typeof-partialt--partialt",level:6},{value:"compare",id:"compare",level:4},{value:"typeof: ComparableData&lt;T&gt;",id:"typeof-comparabledatat",level:6}],m={toc:u};function d(e){var t=e.components,r=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"remove"},"remove"),(0,o.kt)("p",null,"Removes one or multiple items from an array T[].\nFor comparison you can provide key, array of keys or a custom comparison function that should return true if items match.\nIf no comparison data is provided, an equality check is used by default.\nReturns a shallow copy of the updated array T[], and does not mutate the original one."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// Removing value without comparison data\n\nconst items = [1, 2, 3, 4, 5];\n\nconst updatedItems = remove(items, [1, 2, 3]);\n\n// updatedItems will be: [4,5];\n")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// Removing values with comparison function\n\nconst creatures = [\n  { id: 1, type: 'cat' },\n  { id: 2, type: 'unicorn' },\n  { id: 3, type: 'kobold' },\n];\n\nconst nonExistingCreatures = [\n  { id: 2, type: 'unicorn' },\n  { id: 3, type: 'kobold' },\n];\n\nconst realCreatures = remove(\n  creatures,\n  nonExistingCreatures,\n  (a, b) => a.id === b.id\n);\n\n// realCreatures will be: [{id: 1, type: 'cat'}];\n")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// Removing values with key\n\nconst creatures = [\n  { id: 1, type: 'cat' },\n  { id: 2, type: 'unicorn' },\n  { id: 3, type: 'kobold' },\n];\n\nconst nonExistingCreatures = [\n  { id: 2, type: 'unicorn' },\n  { id: 3, type: 'kobold' },\n];\n\nconst realCreatures = remove(creatures, nonExistingCreatures, 'id');\n\n// realCreatures will be: [{id: 1, type: 'cat'}];\n")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// Removing values with array of keys\n\nconst creatures = [\n  { id: 1, type: 'cat' },\n  { id: 2, type: 'unicorn' },\n  { id: 3, type: 'kobold' },\n];\n\nconst nonExistingCreatures = [\n  { id: 2, type: 'unicorn' },\n  { id: 3, type: 'kobold' },\n];\n\nconst realCreatures = remove(creatures, nonExistingCreatures, ['id', 'type']);\n\n// realCreatures will be: [{id: 1, type: 'cat'}];\n")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// Usage with RxState\n\nexport class ListComponent {\n  readonly removeCreature$ = new Subject<Creature>();\n\n  constructor(private state: RxState<ComponentState>) {\n    // Reactive implementation\n    state.connect(\n      'creatures',\n      this.removeCreature$,\n      ({ creatures }, creatureToRemove) => {\n        return remove(creatures, creatureToRemove, (a, b) => a.id === b.id);\n      }\n    );\n  }\n\n  // Imperative implementation\n  removeCreature(creatureToRemove: Creature): void {\n    this.state.set({\n      creatures: remove(\n        this.state.get().creatures,\n        creatureToRemove,\n        (a, b) => a.id === b.id\n      ),\n    });\n  }\n}\n")),(0,o.kt)("h3",{id:"edge-cases"},"Edge cases"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"remove(null as any, items) > null;\nremove(items, null as any) > items;\nremove(null as any, null as any) > null;\nremove(undefined as any, undefined as any) > undefined;\nremove(nonArray as any, items) > nonArray;\n")),(0,o.kt)("h3",{id:"signature"},"Signature"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"function remove<T>(\n  source: T[],\n  scrap: Partial<T>[] | Partial<T>,\n  compare?: ComparableData<T>\n): T[];\n")),(0,o.kt)("h3",{id:"parameters"},"Parameters"),(0,o.kt)("h4",{id:"source"},"source"),(0,o.kt)("h6",{id:"typeof-t"},"typeof: T[]"),(0,o.kt)("h4",{id:"scrap"},"scrap"),(0,o.kt)("h6",{id:"typeof-partialt--partialt"},"typeof: Partial","<","T",">","[] | Partial","<","T",">"),(0,o.kt)("h4",{id:"compare"},"compare"),(0,o.kt)("h6",{id:"typeof-comparabledatat"},"typeof: ComparableData","<","T",">"))}d.isMDXComponent=!0},3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>d});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),s=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(r),d=a,y=m["".concat(p,".").concat(d)]||m[d]||u[d]||o;return r?n.createElement(y,i(i({ref:t},c),{},{components:r})):n.createElement(y,i({ref:t},c))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"}}]);