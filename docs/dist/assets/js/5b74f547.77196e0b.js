"use strict";(self.webpackChunkrx_angular=self.webpackChunkrx_angular||[]).push([[1429],{7303:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>p,toc:()=>c});var a=n(7462),i=n(3366),o=(n(7294),n(3905)),s=["components"],r={sidebar_label:"Output Bindings",title:"Handling Output Bindings"},l="Handling Output Bindings",p={unversionedId:"state/tutorials/basic-tutorial/output-bindings",id:"state/tutorials/basic-tutorial/output-bindings",title:"Handling Output Bindings",description:"This section contains an imperative code base for you to refer to and a quick tutorial on how to set up and use output bindings reactively.",source:"@site/docs/state/tutorials/basic-tutorial/03-output-bindings.md",sourceDirName:"state/tutorials/basic-tutorial",slug:"/state/tutorials/basic-tutorial/output-bindings",permalink:"/docs/state/tutorials/basic-tutorial/output-bindings",draft:!1,editUrl:"https://github.com/rx-angular/rx-angular/edit/main/docs/state/tutorials/basic-tutorial/03-output-bindings.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_label:"Output Bindings",title:"Handling Output Bindings"},sidebar:"docs",previous:{title:"Input Bindings",permalink:"/docs/state/tutorials/basic-tutorial/input-bindings"},next:{title:"Global State",permalink:"/docs/state/tutorials/basic-tutorial/global-state"}},u={},c=[{value:"React to state changes from child components",id:"react-to-state-changes-from-child-components",level:2},{value:"Set up output bindings",id:"set-up-output-bindings",level:2}],d={toc:c};function h(e){var t=e.components,n=(0,i.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"handling-output-bindings"},"Handling Output Bindings"),(0,o.kt)("p",null,"This section contains an ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/rx-angular/rx-angular/blob/main/apps/demos/src/app/features/tutorials/basics/3-output-bindings/output-bindings.start.component.ts"},"imperative code base")," for you to refer to and a quick tutorial on how to set up and use output bindings reactively."),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"react-to-state-changes-from-child-components"},"React to state changes from child components"),(0,o.kt)("p",null,"In this example, we will be using an expansion panel to display a list.\nFor the purpose of this tutorial, we identify the panel's open and close states as part of the component's state.",(0,o.kt)("br",{parentName:"p"}),"\n","We will also have to forward the changes to the component's ",(0,o.kt)("inlineCode",{parentName:"p"},"listExpandedChange")," output binding."),(0,o.kt)("p",null,"As it is essential to connect Observables to the state, there is a service method that deals with this specific issue."),(0,o.kt)("p",null,"This method is called ",(0,o.kt)("inlineCode",{parentName:"p"},"connect"),", and it can assign values from an Observable to the component's state in 3 different ways."),(0,o.kt)("p",null,"One way of using it is passing an Observable of type ",(0,o.kt)("inlineCode",{parentName:"p"},"Partial<ComponentState>")," to the ",(0,o.kt)("inlineCode",{parentName:"p"},"connect")," method directly."),(0,o.kt)("p",null,"When choosing this way of connecting an Observable to the component's state, we will also need a subject called ",(0,o.kt)("inlineCode",{parentName:"p"},"listExpandedChanges")," whose job is to ensure stable user interaction with the open/closed state.\nThis way, whenever we click on the expansion panel, the subject generates a new state using the ",(0,o.kt)("inlineCode",{parentName:"p"},"next")," method."),(0,o.kt)("p",null,"We can generally use ",(0,o.kt)("inlineCode",{parentName:"p"},"connect")," with multiple different overloads. In our case, however, the best use case scenario would look like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"constructor() {\n  // ...\n  this.connect('listExpanded', this.listExpandedChanges);\n}\n")),(0,o.kt)("p",null,"Optionally, we can also provide it as ",(0,o.kt)("inlineCode",{parentName:"p"},"Partial"),".\nThus, we will need to transform the ",(0,o.kt)("inlineCode",{parentName:"p"},"boolean")," value to fit ",(0,o.kt)("inlineCode",{parentName:"p"},"Partial<ComponentState>"),".\nWe can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"map")," operator here to achieve this transformation and pass the projection function ",(0,o.kt)("inlineCode",{parentName:"p"},"listExpanded => ({ listExpanded})"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { map } from `rxjs`;\n// ...\nconstructor() {\n  // ...\n  this.connect(this.listExpandedChanges.pipe(map(listExpanded => ({ listExpanded}))));\n}\n")),(0,o.kt)("p",null,"This overload is especially useful when updating multiple properties at the same time."),(0,o.kt)("p",null,"Now let's refactor the state binding to the expand-panel."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},'<mat-expansion-panel\n  *ngIf="model$ | async as vm"\n  (expandedChange)="listExpandedChanges.next($event)"\n  [expanded]="vm.listExpanded"\n></mat-expansion-panel>\n')),(0,o.kt)("p",null,"If we open and close the expansion panel, we should see the change reflected in the state."),(0,o.kt)("h2",{id:"set-up-output-bindings"},"Set up output bindings"),(0,o.kt)("p",null,"Next, we will replace the logic for the output binding of the component."),(0,o.kt)("p",null,"Since the open/closed state is already reflected in the component's state, we can derive changes directly from it."),(0,o.kt)("p",null,"As we are only interested in changing the slice ",(0,o.kt)("inlineCode",{parentName:"p"},"listExpanded"),", we can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"distinctUntilKeyChanged")," operator\nto get those changes."),(0,o.kt)("p",null,"Let's refactor it into the following and delete the ",(0,o.kt)("inlineCode",{parentName:"p"},"listExpanded")," property in the class and template."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"  import { map, distinctUntilKeyChanged } from `rxjs`;\n  // ...\n  @Output()\n  listExpandedChange = this.$.pipe(distinctUntilKeyChanged('listExpanded'), map(s => s.listExpanded));\n")),(0,o.kt)("p",null,"We are using ",(0,o.kt)("inlineCode",{parentName:"p"},"$")," here to 'signal' that the state has been changed. Signals, in comparison to stateful streams, don't replay the last value on subscription.\nThis is especially useful as a way to avoid loops."))}h.isMDXComponent=!0},3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),d=p(n),h=i,m=d["".concat(l,".").concat(h)]||d[h]||c[h]||o;return n?a.createElement(m,s(s({ref:t},u),{},{components:n})):a.createElement(m,s({ref:t},u))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,s=new Array(o);s[0]=d;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r.mdxType="string"==typeof e?e:i,s[1]=r;for(var p=2;p<o;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);