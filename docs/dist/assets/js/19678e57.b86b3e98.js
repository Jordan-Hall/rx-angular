"use strict";(self.webpackChunkrx_angular=self.webpackChunkrx_angular||[]).push([[8737],{9122:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>c,toc:()=>u});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],s={sidebar_label:"Increment a Value",title:"Logic comparison - Increment a Value"},l="Logic comparison - Increment a Value",c={unversionedId:"state/tutorials/increment-a-value",id:"state/tutorials/increment-a-value",title:"Logic comparison - Increment a Value",description:"This snippet compares 3 different implementations of the same problem.",source:"@site/docs/state/tutorials/increment-a-value.md",sourceDirName:"state/tutorials",slug:"/state/tutorials/increment-a-value",permalink:"/docs/state/tutorials/increment-a-value",draft:!1,editUrl:"https://github.com/rx-angular/rx-angular/edit/main/docs/state/tutorials/increment-a-value.md",tags:[],version:"current",frontMatter:{sidebar_label:"Increment a Value",title:"Logic comparison - Increment a Value"},sidebar:"docs",previous:{title:"Side Effects",permalink:"/docs/state/tutorials/basic-tutorial/side-effects"},next:{title:"Migrating to RxState",permalink:"/docs/state/tutorials/migrating-to-rxstate"}},p={},u=[{value:"Imperative",id:"imperative",level:2},{value:"Reactive reading",id:"reactive-reading",level:2},{value:"Reactive Writing",id:"reactive-writing",level:2},{value:"Control rendering with <code>zoneless</code>",id:"control-rendering-with-zoneless",level:2},{value:"Control rendering direction with rendering strategies",id:"control-rendering-direction-with-rendering-strategies",level:2}],d={toc:u};function m(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"logic-comparison---increment-a-value"},"Logic comparison - Increment a Value"),(0,i.kt)("p",null,"This snippet compares 3 different implementations of the same problem.\nIt serves as a small refactoring guide\nand shows the difference of imperative and declarative/reactive programming."),(0,i.kt)("p",null,"This snippet uses the ",(0,i.kt)("inlineCode",{parentName:"p"},"rxLet")," directive (",(0,i.kt)("inlineCode",{parentName:"p"},"@rx-angular/template"),", not released yet) as replacement for angulars ",(0,i.kt)("inlineCode",{parentName:"p"},"async")," pipe.\nAll examples will work with the ",(0,i.kt)("inlineCode",{parentName:"p"},"async"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Problem"),":\nWe have a component that:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"maintains a state ",(0,i.kt)("inlineCode",{parentName:"li"},"{ count: number }")),(0,i.kt)("li",{parentName:"ul"},"displays the actual value of ",(0,i.kt)("inlineCode",{parentName:"li"},"count")),(0,i.kt)("li",{parentName:"ul"},"increments the count over a button click binding")),(0,i.kt)("h2",{id:"imperative"},"Imperative"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"State"),":\nThe component's state is a simple object ",(0,i.kt)("inlineCode",{parentName:"p"},"state: { count: number } = {};"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Display"),":\nTo display the value we use a template expression ",(0,i.kt)("inlineCode",{parentName:"p"},"{{ state.count }}"),".\nThis expression gets reevaluated whenever the component re-renders."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Action"),":\nThe state gets incremented by one whenever the button gets clicked.\nThe click binding is set-up over an event binding ",(0,i.kt)("inlineCode",{parentName:"p"},"(click)")," and fires the callback ",(0,i.kt)("inlineCode",{parentName:"p"},"onClick"),".\nThis callback increments the state's ",(0,i.kt)("inlineCode",{parentName:"p"},"count")," property, ",(0,i.kt)("inlineCode",{parentName:"p"},"this.state.count = this.state.count + 1;")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Rendering"),":\nThe click binding gets detected by zone which in turn flags this component and all of its ancestors as dirty.\nThis results in an ",(0,i.kt)("inlineCode",{parentName:"p"},"ApplicationRef.tick")," call which re-renders all dirty flagged components."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"@Component({\n  selector: 'my-comp',\n  template: `\n    <div>Value: {{ state.count }}</div>\n    <button (click)=\"onClick($event)\">Increment</button>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MyComponent {\n  state: { count: number } = {};\n  onClick(e) {\n    this.state.count = this.state.count + 1;\n  }\n}\n")),(0,i.kt)("h2",{id:"reactive-reading"},"Reactive reading"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"State"),":\nThe component's state gets managed with ",(0,i.kt)("inlineCode",{parentName:"p"},"RxState")," by extending the class. ",(0,i.kt)("inlineCode",{parentName:"p"},"export class MyComponent extends RxState<{ count: number }> {"),"\nThe component's state is a simple interface: ",(0,i.kt)("inlineCode",{parentName:"p"},"{ count: number }"),".\nInside the class we expose our state as Observable ",(0,i.kt)("inlineCode",{parentName:"p"},"readonly state$ = this.select();")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Display"),":\nTo display the value we use a simple structural directive called ",(0,i.kt)("inlineCode",{parentName:"p"},"*rxLet")," which binds the ",(0,i.kt)("inlineCode",{parentName:"p"},"state$")," property of the component to its ",(0,i.kt)("inlineCode",{parentName:"p"},"host element"),". We can then assign our state observable to a ",(0,i.kt)("inlineCode",{parentName:"p"},"local template variable"),"."),(0,i.kt)("p",null,"Whenever the bound Observable emits a new value the ",(0,i.kt)("inlineCode",{parentName:"p"},"rxLet")," directive flags this component and all of its ancestors as dirty."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Action"),":\nThe state gets incremented by one whenever the button gets clicked.\nThe click binding is set-up over an event binding ",(0,i.kt)("inlineCode",{parentName:"p"},"(click)")," and fires the callback ",(0,i.kt)("inlineCode",{parentName:"p"},"onClick"),".\nThis callback increments the state's ",(0,i.kt)("inlineCode",{parentName:"p"},"count")," property by sending the new value ",(0,i.kt)("inlineCode",{parentName:"p"},"this.set('count', s => s.count + 1);")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Rendering"),":\nThe click binding gets detected by zone which in turn flags this component and all of its ancestors as dirty.\nThis results in an ",(0,i.kt)("inlineCode",{parentName:"p"},"ApplicationRef.tick")," call which re-renders all dirty flagged components."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"@Component({\n  selector: 'my-comp',\n  template: `\n    <div *rxLet=\"state$; let s\">Value: {{ s.count }}</div>\n    <button (click)=\"onClick($event)\">Increment</button>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MyComponent extends RxState<{ count: number }> {\n  state$ = this.select();\n  onClick(e) {\n    this.set('count', (s) => s.count + 1);\n  }\n}\n")),(0,i.kt)("h2",{id:"reactive-writing"},"Reactive Writing"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"State"),":\nThe component's state gets managed with ",(0,i.kt)("inlineCode",{parentName:"p"},"RxState")," by extending the class. ",(0,i.kt)("inlineCode",{parentName:"p"},"export class MyComponent extends RxState<{ count: number }> {"),"\nThe components state is a simple interface ",(0,i.kt)("inlineCode",{parentName:"p"},"{ count: number }"),".\nInside the class we expose our state as Observable ",(0,i.kt)("inlineCode",{parentName:"p"},"readonly state$ = this.select();")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Display"),":\nTo display the value we use a a simple structural directive called ",(0,i.kt)("inlineCode",{parentName:"p"},"*rxLet")," which binds the ",(0,i.kt)("inlineCode",{parentName:"p"},"state$")," property of the component to its ",(0,i.kt)("inlineCode",{parentName:"p"},"host element"),". We can then assign our state observable to a ",(0,i.kt)("inlineCode",{parentName:"p"},"local template variable"),"."),(0,i.kt)("p",null,"Whenever the bound Observable emits a new value the ",(0,i.kt)("inlineCode",{parentName:"p"},"rxLet")," directive flags this component and all of its ancestors as dirty."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Action"),":\nThe state gets incremented by one whenever the button gets clicked.\nIn the class we use a Subject to track clicks ",(0,i.kt)("inlineCode",{parentName:"p"},"btn$ = new Subject();"),".\nThe click binding is set-up over an event binding ",(0,i.kt)("inlineCode",{parentName:"p"},"(click)")," and fires the Subjects ",(0,i.kt)("inlineCode",{parentName:"p"},"next")," method."),(0,i.kt)("p",null,"This Observable gets connected to the component's state in the constructor ",(0,i.kt)("inlineCode",{parentName:"p"},"this.connect(btn$, (oldState, clickEvent) => ({ count: s.count + 1 }));"),".\nWhenever the Subject emits, we apply the increment logic passed as a function.\nThe function signature looks like this: ",(0,i.kt)("inlineCode",{parentName:"p"},"(oldState: T, newValue: T[K]) => T"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Rendering"),":\nThe click binding gets detected by zone which in turn flags this component and all of its ancestors as dirty.\nThis results in an ",(0,i.kt)("inlineCode",{parentName:"p"},"ApplicationRef.tick")," call which re-renders all dirty flagged components."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'@Component({\n  selector: \'my-comp\',\n  template: `\n    <div *rxLet="state$; let s">Value: {{ s.count }}</div>\n    <button (click)="btn$.next($event)">Increment</button>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MyComponent extends RxState<{ count: number }> {\n  readonly state$ = this.select();\n  readonly btn$ = new Subject();\n  constructor() {\n    this.connect(this.btn$, (s, e) => ({ count: s.count + 1 }));\n  }\n}\n')),(0,i.kt)("h2",{id:"control-rendering-with-zoneless"},"Control rendering with ",(0,i.kt)("inlineCode",{parentName:"h2"},"zoneless")),(0,i.kt)("p",null,"In this section we use the ",(0,i.kt)("inlineCode",{parentName:"p"},"zoneless")," directive to get control over rendering."),(0,i.kt)("p",null,"The sections State and Action are identical.\nThe Display has a small difference. We use the ",(0,i.kt)("inlineCode",{parentName:"p"},"zoneless")," directive to get rid of renderings caused by the button eventListener."),(0,i.kt)("p",null,"Rendering:\nA rerender gets only triggered by the ",(0,i.kt)("inlineCode",{parentName:"p"},"rxLet")," directive. The process is the same as before."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'@Component({\n  selector: \'my-comp\',\n  template: `\n    <div *rxLet="state$; let s">Value: {{ s.count }}</div>\n    <button [zoneless] (click)="btn$.next($event)">Increment</button>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MyComponent extends RxState<{ count: number }> {\n  state$ = this.select();\n  btn$ = new Subject();\n  constructor() {\n    this.connect(this.btn$, (oldState, clickEvent) => ({ count: s.count + 1 }));\n  }\n}\n')),(0,i.kt)("h2",{id:"control-rendering-direction-with-rendering-strategies"},"Control rendering direction with rendering strategies"),(0,i.kt)("p",null,"In this section we use the ",(0,i.kt)("inlineCode",{parentName:"p"},"strategy")," option of the ",(0,i.kt)("inlineCode",{parentName:"p"},"rxLet")," directive to get advanced control over rendering."),(0,i.kt)("p",null,"The sections ",(0,i.kt)("strong",{parentName:"p"},"State")," and ",(0,i.kt)("strong",{parentName:"p"},"Action")," are identical to the previous examples."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Rendering"),":\nThe rendering still gets managed by the ",(0,i.kt)("inlineCode",{parentName:"p"},"rxLet")," Directive. But with the ",(0,i.kt)("inlineCode",{parentName:"p"},"strategy")," set to ",(0,i.kt)("inlineCode",{parentName:"p"},"local")," changes will not result in a re-render of any ancestor component. Thus saving you tons of rendering cycles."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"@Component({\n  selector: 'my-comp',\n  template: `\n    <div *rxLet=\"state$; let s; strategy: 'local'\">Value: {{ s.count }}</div>\n    <button [zoneless] (click)=\"btn$.next($event)\">Increment</button>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MyComponent extends RxState<{ count: number }> {\n  state$ = this.select();\n  btn$ = new Subject();\n  constructor() {\n    this.connect(this.btn$, (s, e) => ({ count: s.count + 1 }));\n  }\n}\n")))}m.isMDXComponent=!0},3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);