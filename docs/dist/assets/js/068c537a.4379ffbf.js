"use strict";(self.webpackChunkrx_angular=self.webpackChunkrx_angular||[]).push([[894],{4793:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>k,frontMatter:()=>r,metadata:()=>p,toc:()=>d});var n=a(7462),s=a(3366),o=(a(7294),a(3905)),l=["components"],r={sidebar_position:3,sidebar_label:"Use RxState as Global State",title:"How to manage global state"},i=void 0,p={unversionedId:"state/recipes/use-rxstate-as-global-state",id:"state/recipes/use-rxstate-as-global-state",title:"How to manage global state",description:"Author: @Phhansen",source:"@site/docs/state/recipes/use-rxstate-as-global-state.md",sourceDirName:"state/recipes",slug:"/state/recipes/use-rxstate-as-global-state",permalink:"/docs/state/recipes/use-rxstate-as-global-state",draft:!1,editUrl:"https://github.com/rx-angular/rx-angular/edit/main/docs/state/recipes/use-rxstate-as-global-state.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,sidebar_label:"Use RxState as Global State",title:"How to manage global state"},sidebar:"docs",previous:{title:"Work with HostBindings",permalink:"/docs/state/recipes/work-with-hostbindings"},next:{title:"Reuse ngrx selectors to compose state",permalink:"/docs/state/integrations/resuse-ngrx-selectors-to-compose-state"}},c={},d=[{value:"Example",id:"example",level:2},{value:"To do",id:"to-do",level:3},{value:"Setup",id:"setup",level:3},{value:"What is global and what is local?",id:"what-is-global-and-what-is-local",level:3},{value:"Moving the <code>tasks</code> array to our <strong>global</strong> state",id:"moving-the-tasks-array-to-our-global-state",level:3}],m={toc:d};function k(e){var t=e.components,a=(0,s.Z)(e,l);return(0,o.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Author: ",(0,o.kt)("a",{parentName:"em",href:"https://github.com/Phhansen"},"@Phhansen"))),(0,o.kt)("h1",{id:"how-to-manage-global-state"},"How to manage global state"),(0,o.kt)("p",null,"For an explainer on how to easily identify what should be global state and what should local state, please read: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/rx-angular/rx-angular/tree/main/libs/state/docs/snippets/global-state-vs-local-state.md"},"Difference between Global and Local state"),"."),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("p",null,"As with the global/local state snippet, we'll be doing the same example to-do app with 2 views."),(0,o.kt)("h3",{id:"to-do"},"To do"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Renders a list of ",(0,o.kt)("inlineCode",{parentName:"li"},"tasks")," that must be completed and a ",(0,o.kt)("inlineCode",{parentName:"li"},"counter")," that shows how many tasks left to do."),(0,o.kt)("li",{parentName:"ul"},"The list can be expanded or collapsed and has property ",(0,o.kt)("inlineCode",{parentName:"li"},"isExpanded"),"."),(0,o.kt)("li",{parentName:"ul"},"Gets tasks array from endpoint ",(0,o.kt)("em",{parentName:"li"},"tasks/get")," and filters out tasks that already answered.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"interface TodosState {\n  tasks: Task[];\n  isExpanded: boolean;\n}\n\n@Component({\n  selector: 'todos',\n  templateUrl: './todo.component.html',\n})\nexport class TodoComponent extends RxState<TodosState> {\n  readonly tasks$ = this.select('tasks');\n  readonly counter$ = this.select(\n    pluck('tasks'),\n    map((tasks) => tasks.length)\n  );\n  readonly isExpanded$ = this.select('isExpanded');\n\n  constructor(private tasksService: TasksService) {\n    super();\n\n    /* Filter out tasks that are done */\n    this.connect(\n      'tasks',\n      this.tasksService\n        .fetchTasks()\n        .pipe(filter((tasks) => tasks.filter((task) => !task.done)))\n    );\n  }\n}\n")),(0,o.kt)("h3",{id:"setup"},"Setup"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Renders a list of all existing ",(0,o.kt)("inlineCode",{parentName:"li"},"tasks")," and a ",(0,o.kt)("inlineCode",{parentName:"li"},"counter")," that shows the total amount of tasks."),(0,o.kt)("li",{parentName:"ul"},"The list can be expanded or collapsed and has property ",(0,o.kt)("inlineCode",{parentName:"li"},"isExpanded"),"."),(0,o.kt)("li",{parentName:"ul"},"Gets tasks as array from endpoint ",(0,o.kt)("em",{parentName:"li"},"tasks/get"),".")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"interface AllTodosState {\n  tasks: Task[];\n  isExpanded: boolean;\n}\n\n@Component({\n  selector: 'all-tasks',\n  templateUrl: './all-tasks.component.html',\n})\nexport class AllTasksComponent extends RxState<AllTodosState> {\n  readonly tasks$ = this.select('tasks');\n  readonly counter$ = this.select(\n    pluck('tasks'),\n    map((tasks) => tasks.length)\n  );\n  readonly isExpanded$ = this.select('isExpanded');\n\n  constructor(private tasksService: TasksService) {\n    super();\n\n    /* Fetch tasks from backend */\n    this.connect('tasks', this.tasksService.fetchTasks());\n  }\n}\n")),(0,o.kt)("h3",{id:"what-is-global-and-what-is-local"},"What is global and what is local?"),(0,o.kt)("p",null,"Looking at the above examples, let us see what is ",(0,o.kt)("strong",{parentName:"p"},"local")," and what is ",(0,o.kt)("strong",{parentName:"p"},"global"),"!"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"counter")," property is a part of ",(0,o.kt)("strong",{parentName:"li"},"local")," state of each view. The counter value is specific for each view."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"isExpanded")," property is also part of ",(0,o.kt)("strong",{parentName:"li"},"local")," state. Both lists can be expanded/collapsed but this status isn't shared between them and they don't care about this status of each other."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"tasks")," array is a part of our app ",(0,o.kt)("strong",{parentName:"li"},"global")," state. This array needed for each view and received from the same endpoint. We don't need to load it twice. It is time to introduce a global layer to our application and move tasks array and retrieving logic there.")),(0,o.kt)("h3",{id:"moving-the-tasks-array-to-our-global-state"},"Moving the ",(0,o.kt)("inlineCode",{parentName:"h3"},"tasks")," array to our ",(0,o.kt)("strong",{parentName:"h3"},"global")," state"),(0,o.kt)("p",null,"We can handle ",(0,o.kt)("strong",{parentName:"p"},"global")," state in different ways, but for this snippet we\xb4re going to use an ",(0,o.kt)("inlineCode",{parentName:"p"},"injectionToken"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { InjectionToken } from '@angular/core';\nimport { RxState } from '@rx-angular/state';\n\nexport interface Task {\n  id: number;\n  label: string;\n  done: boolean;\n}\n\nexport interface GlobalState {\n  tasks: Task[];\n}\n\nexport const GLOBAL_RX_STATE = new InjectionToken<RxState<GlobalState>>(\n  'GLOBAL_RX_STATE'\n);\n")),(0,o.kt)("p",null,"We then ",(0,o.kt)("em",{parentName:"p"},"provide")," the ",(0,o.kt)("inlineCode",{parentName:"p"},"injectionToken")," in our ",(0,o.kt)("inlineCode",{parentName:"p"},"app.module.ts"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { GLOBAL_RX_STATE, GlobalState } from "./rx-state";\n...\n\n@NgModule({\n    imports: [...],\n    declarations: [...],\n    providers: [{\n        provide: GLOBAL_RX_STATE, useFactory: () => new RxState<GlobalState>()\n    }],\n    bootstrap: [...]\n})\nexport class AppModule {}\n')),(0,o.kt)("p",null,"We can then load the ",(0,o.kt)("inlineCode",{parentName:"p"},"tasks")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"AppComponent")," via our ",(0,o.kt)("inlineCode",{parentName:"p"},"tasksService.fetchTasks()")," and just have our ",(0,o.kt)("inlineCode",{parentName:"p"},"TodoComponent")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"AllTasksComponent")," connect to the global state."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { GLOBAL_RX_STATE } from './rx-state';\n\n@Component({\n  selector: 'my-app',\n  templateUrl: './app.component.html',\n  styleUrls: [ './app.component.css' ]\n})\nexport class AppComponent  {\nconstructor(@Inject(GLOBAL_RX_STATE) private state, private tasksService: TasksService) {\n    /* Fetch tasks from backend */\n    this.state.connect(\"tasks\", this.tasksService.fetchTasks());\n}\n")),(0,o.kt)("p",null,"And our updated ",(0,o.kt)("inlineCode",{parentName:"p"},"TodoComponent")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"interface TodosState {\n  tasks: Task[];\n  isExpanded: boolean;\n}\n\n@Component({\n  selector: 'todos',\n  templateUrl: './todo.component.html',\n})\nexport class TodoComponent extends RxState<TodosState> {\n  readonly tasks$ = this.select('tasks');\n  readonly counter$ = this.select(\n    pluck('tasks'),\n    map((tasks) => tasks.length)\n  );\n  readonly isExpanded$ = this.select('isExpanded');\n\n  constructor(\n    @Inject(GLOBAL_RX_STATE) private globalState: RxState<GlobalState>\n  ) {\n    super();\n\n    /* Connect to global state and filter out already completed tasks */\n    this.connect(\n      'tasks',\n      this.globalState\n        .select('tasks')\n        .pipe(map((tasks) => tasks.filter((task) => !task.done)))\n    );\n  }\n}\n")),(0,o.kt)("p",null,"Here we ",(0,o.kt)("inlineCode",{parentName:"p"},"connect")," to the global state instance and filter out the already completed tasks."),(0,o.kt)("p",null,"Our ",(0,o.kt)("inlineCode",{parentName:"p"},"AllTasksComponent")," is slightly different in that it doesn\xb4t actually need to filter anything, and thus it only needs to manage the ",(0,o.kt)("strong",{parentName:"p"},"local")," ",(0,o.kt)("inlineCode",{parentName:"p"},"isExpanded")," value, and just have the ",(0,o.kt)("inlineCode",{parentName:"p"},"tasks")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"counter")," values come directly from the ",(0,o.kt)("strong",{parentName:"p"},"global")," state."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"interface AllTodosState {\n  isExpanded: boolean;\n}\n\n@Component({\n  selector: 'all-tasks',\n  templateUrl: './all-tasks.component.html',\n})\nexport class AllTasksComponent extends RxState<AllTodosState> {\n  readonly tasks$ = this.globalState.select('tasks');\n  readonly counter$ = this.globalState.select(\n    pluck('tasks'),\n    map((tasks) => tasks.length)\n  );\n  readonly isExpanded$ = this.select('isExpanded');\n\n  constructor(\n    @Inject(GLOBAL_RX_STATE) private globalState: RxState<GlobalState>\n  ) {\n    super();\n  }\n}\n")))}k.isMDXComponent=!0},3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>k});var n=a(7294);function s(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){s(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,n,s=function(e,t){if(null==e)return{};var a,n,s={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(s[a]=e[a]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var i=n.createContext({}),p=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,s=e.mdxType,o=e.originalType,i=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),m=p(a),k=s,u=m["".concat(i,".").concat(k)]||m[k]||d[k]||o;return a?n.createElement(u,l(l({ref:t},c),{},{components:a})):n.createElement(u,l({ref:t},c))}));function k(e,t){var a=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=a.length,l=new Array(o);l[0]=m;var r={};for(var i in t)hasOwnProperty.call(t,i)&&(r[i]=t[i]);r.originalType=e,r.mdxType="string"==typeof e?e:s,l[1]=r;for(var p=2;p<o;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"}}]);