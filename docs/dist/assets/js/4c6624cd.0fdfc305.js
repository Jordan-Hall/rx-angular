"use strict";(self.webpackChunkrx_angular=self.webpackChunkrx_angular||[]).push([[7740],{5881:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>u});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],s={sidebar_label:"Setup",sidebar_position:2,title:"Setup"},p=void 0,l={unversionedId:"state/getting-started/setup",id:"state/getting-started/setup",title:"Setup",description:"Basic Setup",source:"@site/docs/state/getting-started/setup.md",sourceDirName:"state/getting-started",slug:"/state/getting-started/setup",permalink:"/docs/state/getting-started/setup",draft:!1,editUrl:"https://github.com/rx-angular/rx-angular/edit/main/docs/state/getting-started/setup.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"Setup",sidebar_position:2,title:"Setup"},sidebar:"docs",previous:{title:"Overview",permalink:"/docs/state/getting-started/overview"},next:{title:"RxState",permalink:"/docs/state/api/rx-state"}},c={},u=[{value:"Basic Setup",id:"basic-setup",level:2},{value:"Compose",id:"compose",level:3},{value:"Inherit",id:"inherit",level:3},{value:"Connect global state",id:"connect-global-state",level:2},{value:"Input Property Bindings",id:"input-property-bindings",level:2},{value:"Output Property Bindings",id:"output-property-bindings",level:2},{value:"Updates based on previous state",id:"updates-based-on-previous-state",level:2},{value:"Usage with services",id:"usage-with-services",level:2},{value:"Manage side effects",id:"manage-side-effects",level:2},{value:"setAccumulator and deep-copying state",id:"setaccumulator-and-deep-copying-state",level:2}],d={toc:u};function m(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"basic-setup"},"Basic Setup"),(0,o.kt)("h3",{id:"compose"},"Compose"),(0,o.kt)("p",null,"The default way of using the ",(0,o.kt)("inlineCode",{parentName:"p"},"RxState")," service is by ",(0,o.kt)("inlineCode",{parentName:"p"},"providing")," a local instance bound to the component's lifecycle.\nThis way, you have complete control over the API and what you want to expose."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"@Component({\n  selector: 'app-stateful',\n  template: `<div>{{ state$ | async | json }}</div>`,\n  providers: [RxState],\n})\nexport class StatefulComponent {\n  readonly state$ = this.state.select();\n\n  constructor(private state: RxState<{ foo: string }>) {}\n}\n")),(0,o.kt)("h3",{id:"inherit"},"Inherit"),(0,o.kt)("p",null,"If you wish, there is also the possibility of ",(0,o.kt)("strong",{parentName:"p"},"extending")," the ",(0,o.kt)("inlineCode",{parentName:"p"},"RxState")," service. This can come in very handy for small\ncomponents. Keep in mind you will expose the full ",(0,o.kt)("inlineCode",{parentName:"p"},"RxState")," API to everyone having access to the component extending it."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"@Directive({\n  selector: '[appStateful]',\n})\nexport class StatefulComponent extends RxState<{ foo: number }> {\n  readonly state$ = this.select();\n\n  constructor() {\n    super();\n  }\n}\n")),(0,o.kt)("h2",{id:"connect-global-state"},"Connect global state"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Connect state slices from third-party services (e.g. NgRx ",(0,o.kt)("inlineCode",{parentName:"strong"},"Store"),") or trigger them from side-effects")),(0,o.kt)("p",null,"Many people have problems combining observables with the component state in a clean way.\nHere is a use case where the ",(0,o.kt)("inlineCode",{parentName:"p"},"@ngrx/store")," gets connected to the local state:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"@Component({\n  selector: 'app-stateful',\n  template: ` <div>{{ (state$ | async).count }}</div> `,\n  providers: [RxState],\n})\nexport class StatefulComponent {\n  readonly state$ = this.state.select();\n\n  constructor(\n    private state: RxState<{ count: number }>,\n    private store: Store<AppState>\n  ) {\n    state.connect('count', store.select('count'));\n  }\n}\n")),(0,o.kt)("h2",{id:"input-property-bindings"},"Input Property Bindings"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Combining ",(0,o.kt)("inlineCode",{parentName:"strong"},"Input")," bindings passing single values with RxState")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"@Component({\n  selector: 'app-stateful',\n  template: ` <div>{{ title$ | async }}</div> `,\n  providers: [RxState],\n})\nexport class StatefulComponent {\n  readonly title$ = this.state.select('title');\n\n  @Input() set title(title: string) {\n    this.state.set({ title });\n  }\n\n  constructor(private state: RxState<{ title: string }>) {}\n}\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Combining ",(0,o.kt)("inlineCode",{parentName:"strong"},"Input")," bindings passing Observables with RxState")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"You can have 1 change detection per emission")," and improve performance of your app\nby providing ",(0,o.kt)("inlineCode",{parentName:"p"},"Observables")," directly as ",(0,o.kt)("inlineCode",{parentName:"p"},"Input"),".\nThis way the ChangeDetection for the ",(0,o.kt)("inlineCode",{parentName:"p"},"Input")," binding will only fire once for the first assignment."),(0,o.kt)("hr",null),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const initialState: ComponentState = {\n  title: 'MyComponent',\n  showButton: false,\n  count: 0,\n};\n\n@Component({\n  selector: 'app-stateful',\n  template: ` <div>{{ (state$ | async).count }}</div> `,\n  providers: [RxState],\n})\nexport class StatefulComponent {\n  @Input() set config(count$: Observable<ComponentStateInput>) {\n    this.state.connect('count', count$);\n  }\n  constructor(private state: RxState<{ count: number }>) {}\n}\n")),(0,o.kt)("h2",{id:"output-property-bindings"},"Output Property Bindings"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Combining ",(0,o.kt)("inlineCode",{parentName:"strong"},"Output")," bindings directly from RxState")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"@Component({\n  selector: 'app-stateful',\n  template: ` <div (click)=\"onClick($event)\">Increment</div> `,\n  providers: [RxState],\n})\nexport class StatefulComponent {\n  @Output() countChange = this.state.$.pipe(select('count'));\n\n  constructor(private state: RxState<{ count: number }>) {}\n\n  onClick() {\n    this.state.set(({ count }) => {\n      count: count++;\n    });\n  }\n}\n")),(0,o.kt)("h2",{id:"updates-based-on-previous-state"},"Updates based on previous state"),(0,o.kt)("p",null,"Often it is needed to get the previous state to calculate the new one."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"@Component({\n  selector: 'app-stateful',\n  template: `\n    <ul>\n      <li *ngFor=\"let item of items$ | async\">\n        {{ item }}\n        <button (click)=\"btnClick$.next(item.id)\">remove</button>\n      </li>\n    </ul>\n  `,\n  providers: [RxState],\n})\nexport class StatefulComponent {\n  readonly items$ = this.state.select('list');\n  readonly btnClick$ = new Subject();\n\n  constructor(private state: RxState<{ list: { id: number }[] }>) {\n    this.state.connect(this.btnClick$, (state, id) => ({\n      ...state,\n      list: state.list.filter((i) => i.id !== id),\n    }));\n  }\n}\n")),(0,o.kt)("h2",{id:"usage-with-services"},"Usage with services"),(0,o.kt)("p",null,"If you strive for a more sophisticated ",(0,o.kt)("strong",{parentName:"p"},"separation of concerns"),", you can ",(0,o.kt)("inlineCode",{parentName:"p"},"extend")," the ",(0,o.kt)("inlineCode",{parentName:"p"},"RxState")," in a\nlocally provided ",(0,o.kt)("inlineCode",{parentName:"p"},"Service"),"."),(0,o.kt)("p",null,"Create a local ",(0,o.kt)("inlineCode",{parentName:"p"},"Service")," by ",(0,o.kt)("inlineCode",{parentName:"p"},"extending")," the ",(0,o.kt)("inlineCode",{parentName:"p"},"RxState")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"interface StatefulComponentState {\n  foo: number;\n}\n@Injectable()\nexport class StatefulComponentService extends RxState<StatefulComponentState> {\n  readonly state$ = this.select();\n\n  constructor() {\n    super();\n  }\n}\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Provide")," the ",(0,o.kt)("inlineCode",{parentName:"p"},"Service")," inside the using ",(0,o.kt)("inlineCode",{parentName:"p"},"Component")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"Directive")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"@Component({\n  selector: 'app-stateful',\n  template: ` <div>{{ viewState$ | async | json }}</div> `,\n  providers: [StatefulComponentService],\n})\nexport class StatefulComponent {\n  readonly viewState$ = this.state.state$;\n\n  constructor(private state: StatefulComponentService) {}\n}\n")),(0,o.kt)("h2",{id:"manage-side-effects"},"Manage side effects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"@Component({\n  selector: 'app-stateful',\n  template: `<ul>\n    <li *ngFor=\"let item of items$ | async\">\n      {{ item }}\n      <button (click)=\"deleteClick$.next(item.id)\">remove</button>\n    </li>\n  </ul> `,\n  providers: [RxState],\n})\nexport class StatefulComponent {\n  readonly items$ = this.state.select('list');\n  readonly deleteClick$ = new Subject<number>();\n\n  constructor(\n    private state: RxState<{ list: { id: number }[] }>,\n    private apiService: ApiService\n  ) {\n    this.state.hold(\n      this.deleteClick$.pipe(concatMap((id) => this.apiService.delete(id)))\n    );\n  }\n}\n")),(0,o.kt)("h2",{id:"setaccumulator-and-deep-copying-state"},"setAccumulator and deep-copying state"),(0,o.kt)("p",null,"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"setAccumulator")," to update state via deep-copies."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const myAccumulator = (state: MyState, slice: Partial<MyState>) =>\n  deepCopy(state, slice);\nthis.state.setAccumulator(myAccumulator);\n")),(0,o.kt)("p",null,"This can be done at runtime."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"disclaimer"),": this doc is work in progress. Not every use case has found its way into the docs. We encourage you to contribute :)."))}m.isMDXComponent=!0},3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=r,g=d["".concat(p,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(g,i(i({ref:t},c),{},{components:n})):a.createElement(g,i({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);